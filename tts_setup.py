#!/usr/bin/env python3
"""
Script de configuration et diagnostic TTS pour William
R√©sout les probl√®mes de lenteur et d'absence de voix Coqui
"""

import subprocess
import sys
import os
import platform
from pathlib import Path

def run_command(cmd, description):
    """Ex√©cute une commande et affiche le r√©sultat"""
    print(f"üîß {description}...")
    try:
        result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
        if result.returncode == 0:
            print(f"‚úÖ {description} - Succ√®s")
            return True
        else:
            print(f"‚ùå {description} - Erreur: {result.stderr}")
            return False
    except Exception as e:
        print(f"‚ùå {description} - Exception: {e}")
        return False

def check_python_version():
    """V√©rifie la version de Python"""
    version = sys.version_info
    print(f"üêç Python {version.major}.{version.minor}.{version.micro}")
    
    if version.major < 3 or (version.major == 3 and version.minor < 8):
        print("‚ö†Ô∏è Python 3.8+ recommand√© pour TTS")
        return False
    return True

def install_dependencies():
    """Installation des d√©pendances TTS optimis√©es"""
    
    dependencies = [
        # TTS principal
        ("TTS", "Coqui TTS pour synth√®se vocale avanc√©e"),
        
        # Audio
        ("pygame", "Lecture audio optimis√©e"),
        ("pyttsx3", "Synth√®se vocale de fallback"),
        ("soundfile", "Traitement fichiers audio"),
        
        # IA/ML
        ("torch", "PyTorch pour les mod√®les IA"),
        ("torchaudio", "Audio avec PyTorch"),
        
        # Utilitaires
        ("numpy", "Calculs num√©riques"),
        ("librosa", "Analyse audio avanc√©e"),
    ]
    
    print("üì¶ Installation des d√©pendances TTS...")
    
    for package, description in dependencies:
        print(f"\nüì¶ Installation de {package} ({description})")
        
        # Commande d'installation adapt√©e
        if package == "torch":
            # Installation PyTorch avec support CUDA si disponible
            if platform.system() == "Windows":
                cmd = "pip install torch torchaudio --index-url https://download.pytorch.org/whl/cu118"
            else:
                cmd = "pip install torch torchaudio"
        else:
            cmd = f"pip install {package}"
        
        run_command(cmd, f"Installation {package}")

def setup_coqui_tts():
    """Configuration sp√©cifique de Coqui TTS"""
    print("\nüé§ Configuration de Coqui TTS...")
    
    # V√©rification de l'installation
    try:
        from TTS.api import TTS
        print("‚úÖ Coqui TTS install√©")
        
        # Test de chargement du mod√®le XTTS
        print("üîÑ Test du mod√®le XTTS...")
        try:
            tts = TTS("tts_models/multilingual/multi-dataset/xtts_v2")
            print("‚úÖ Mod√®le XTTS charg√© avec succ√®s")
            
            # Test de synth√®se rapide
            import tempfile
            with tempfile.NamedTemporaryFile(suffix=".wav", delete=True) as f:
                tts.tts_to_file("Test", file_path=f.name, language="fr")
                print("‚úÖ Test de synth√®se r√©ussi")
                
        except Exception as e:
            print(f"‚ùå Erreur mod√®le XTTS: {e}")
            print("üí° Le mod√®le sera t√©l√©charg√© au premier usage")
            
    except ImportError:
        print("‚ùå Coqui TTS non install√©")
        print("üí° Lancez: pip install TTS")

def optimize_system():
    """Optimisations syst√®me pour TTS"""
    print("\n‚ö° Optimisations syst√®me...")
    
    # Cr√©ation du dossier de cache TTS
    cache_dir = Path.home() / ".cache" / "tts"
    cache_dir.mkdir(parents=True, exist_ok=True)
    print(f"‚úÖ Cache TTS: {cache_dir}")
    
    # Variables d'environnement pour optimiser les performances
    optimizations = {
        "PYTORCH_CUDA_ALLOC_CONF": "max_split_size_mb:128",
        "TTS_CACHE_PATH": str(cache_dir),
        "PYTHONUNBUFFERED": "1"
    }
    
    for var, value in optimizations.items():
        os.environ[var] = value
        print(f"‚úÖ {var}={value}")

def create_voice_samples():
    """Cr√©e des √©chantillons de voix pour le clonage"""
    samples_dir = Path("voice_samples")
    samples_dir.mkdir(exist_ok=True)
    
    print(f"\nüéµ Dossier √©chantillons vocaux: {samples_dir}")
    print("üí° Placez vos fichiers WAV de r√©f√©rence (5-10 secondes) dans ce dossier")
    print("   pour am√©liorer la qualit√© de clonage vocal XTTS")

def diagnose_audio_system():
    """Diagnostic du syst√®me audio"""
    print("\nüîä Diagnostic syst√®me audio...")
    
    # Test pygame
    try:
        import pygame
        pygame.mixer.init()
        print("‚úÖ Pygame audio fonctionnel")
        pygame.mixer.quit()
    except Exception as e:
        print(f"‚ùå Pygame audio: {e}")
    
    # Test pyttsx3
    try:
        import pyttsx3
        engine = pyttsx3.init()
        voices = engine.getProperty('voices')
        print(f"‚úÖ pyttsx3: {len(voices)} voix disponibles")
        
        # Affichage des voix fran√ßaises
        french_voices = []
        for voice in voices:
            if any(keyword in voice.name.lower() for keyword in ['hortense', 'marie', 'fr', 'french']):
                french_voices.append(voice.name)
        
        if french_voices:
            print(f"üá´üá∑ Voix fran√ßaises: {', '.join(french_voices)}")
        else:
            print("‚ö†Ô∏è Aucune voix fran√ßaise d√©tect√©e")
            
    except Exception as e:
        print(f"‚ùå pyttsx3: {e}")

def create_improved_config():
    """Cr√©e un fichier de configuration TTS optimis√©"""
    config_content = '''# Configuration TTS optimis√©e pour William
TTS_CONFIG = {
    "preferred_engine": "xtts",  # xtts, pyttsx3
    "language": "fr",
    "speed": 1.0,
    "volume": 0.9,
    "voice_cloning": True,
    "cache_enabled": True,
    "async_processing": True,
    "quality": "high",  # high, medium, fast
    
    # Param√®tres XTTS
    "xtts": {
        "model": "tts_models/multilingual/multi-dataset/xtts_v2",
        "gpu": True,
        "split_sentences": True,
        "temperature": 0.7,
    },
    
    # Param√®tres pyttsx3 (fallback)
    "pyttsx3": {
        "rate": 180,
        "volume": 0.9,
        "voice_preference": ["hortense", "marie", "french", "fr"]
    }
}
'''
    
    config_file = Path("tts_config.py")
    config_file.write_text(config_content, encoding="utf-8")
    print(f"‚úÖ Configuration cr√©√©e: {config_file}")

def main():
    """Script principal de configuration"""
    print("ü§ñ Configuration TTS pour William")
    print("=" * 50)
    
    # V√©rifications syst√®me
    if not check_python_version():
        return
    
    # Installation des d√©pendances
    install_dependencies()
    
    # Configuration sp√©cifique
    setup_coqui_tts()
    optimize_system()
    create_voice_samples()
    
    # Diagnostic
    diagnose_audio_system()
    
    # Configuration
    create_improved_config()
    
    print("\nüéâ Configuration TTS termin√©e!")
    print("\nüìã √âtapes suivantes:")
    print("1. Testez avec: python -c 'from tts_improved import test_tts; test_tts()'")
    print("2. Placez vos √©chantillons vocaux dans voice_samples/")
    print("3. Utilisez speak() dans votre code principal")
    
    print("\nüí° Conseils pour am√©liorer les performances:")
    print("- Utilisez un GPU NVIDIA pour XTTS (plus rapide)")
    print("- Enregistrez des √©chantillons vocaux de 5-10 secondes")
    print("- Activez le cache pour √©viter les rechargements")

if __name__ == "__main__":
    main()
