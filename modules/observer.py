import time
import os
from datetime import datetime
try:
    from watchdog.observers import Observer
    from watchdog.events import FileSystemEventHandler
    WATCHDOG_AVAILABLE = True
except ImportError:
    WATCHDOG_AVAILABLE = False
    print("‚ö†Ô∏è Module watchdog non install√©. Observer d√©sactiv√©.")

class ProjectObserver(FileSystemEventHandler):
    """Gestionnaire d'√©v√©nements pour surveiller les fichiers"""
    
    def __init__(self):
        super().__init__()
        self.last_events = {}  # Pour √©viter les doublons d'√©v√©nements
        
    def _should_ignore_event(self, event):
        """Filtre les √©v√©nements √† ignorer"""
        if event.is_directory:
            return True
            
        # Ignorer les fichiers temporaires et syst√®me
        ignored_extensions = ['.tmp', '.swp', '.log', '~', '.DS_Store']
        ignored_names = ['Thumbs.db', '.git', '__pycache__']
        
        file_path = event.src_path
        
        # V√©rifier les extensions
        for ext in ignored_extensions:
            if file_path.endswith(ext):
                return True
                
        # V√©rifier les noms de fichiers
        for name in ignored_names:
            if name in file_path:
                return True
                
        return False
        
    def _deduplicate_event(self, event):
        """√âvite les √©v√©nements en double"""
        key = f"{event.event_type}:{event.src_path}"
        current_time = time.time()
        
        if key in self.last_events:
            if current_time - self.last_events[key] < 1:  # Moins d'1 seconde
                return True
                
        self.last_events[key] = current_time
        return False

    def on_modified(self, event):
        """Fichier modifi√©"""
        if self._should_ignore_event(event) or self._deduplicate_event(event):
            return
            
        file_name = os.path.basename(event.src_path)
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[üîÑ {timestamp}] Modifi√© : {file_name}")
        
        # Log dans le fichier
        self._log_event("MODIFI√â", event.src_path)

    def on_created(self, event):
        """Nouveau fichier cr√©√©"""
        if self._should_ignore_event(event) or self._deduplicate_event(event):
            return
            
        file_name = os.path.basename(event.src_path)
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[üìÅ {timestamp}] Nouveau : {file_name}")
        
        # Log dans le fichier
        self._log_event("CR√â√â", event.src_path)

    def on_deleted(self, event):
        """Fichier supprim√©"""
        if self._should_ignore_event(event) or self._deduplicate_event(event):
            return
            
        file_name = os.path.basename(event.src_path)
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[üóëÔ∏è {timestamp}] Supprim√© : {file_name}")
        
        # Log dans le fichier
        self._log_event("SUPPRIM√â", event.src_path)

    def on_moved(self, event):
        """Fichier d√©plac√©/renomm√©"""
        if self._should_ignore_event(event):
            return
            
        old_name = os.path.basename(event.src_path)
        new_name = os.path.basename(event.dest_path)
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[üì¶ {timestamp}] D√©plac√© : {old_name} ‚Üí {new_name}")
        
        # Log dans le fichier
        self._log_event("D√âPLAC√â", f"{event.src_path} ‚Üí {event.dest_path}")
        
    def _log_event(self, event_type, file_path):
        """Enregistre l'√©v√©nement dans un fichier log"""
        try:
            with open("data/file_observer.log", "a", encoding="utf-8") as f:
                timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
                f.write(f"[{timestamp}] {event_type}: {file_path}\n")
        except Exception as e:
            print(f"‚ùå Erreur lors de l'√©criture du log : {e}")

def start_observer(path="data/user_projects"):
    """D√©marre l'observateur de fichiers"""
    if not WATCHDOG_AVAILABLE:
        print("‚ùå Impossible de d√©marrer l'observer : module watchdog manquant")
        print("üí° Installez-le avec : pip install watchdog")
        return
        
    # Cr√©er le dossier s'il n'existe pas
    if not os.path.exists(path):
        os.makedirs(path)
        print(f"üìÅ Dossier cr√©√© : {path}")
        
    event_handler = ProjectObserver()
    observer = Observer()
    observer.schedule(event_handler, path=path, recursive=True)
    observer.start()
    
    print(f"üì° Surveillance de '{path}' activ√©e...")
    print("üîç Jarvis observe maintenant vos fichiers de projet")
    
    try:
        while True:
            time.sleep(1)
    except KeyboardInterrupt:
        print("\nüì° Arr√™t de l'observateur...")
        observer.stop()
    except Exception as e:
        print(f"‚ùå Erreur de l'observateur : {e}")
        observer.stop()
        
    observer.join()
    print("üì° Observateur arr√™t√©")

# Fonction de fallback si watchdog n'est pas disponible
def simple_observer(path="data/user_projects"):
    """Observer simple sans watchdog (fallback)"""
    print(f"üì° Observer simple activ√© pour '{path}'")
    print("‚ö†Ô∏è Fonctionnalit√©s limit√©es - installez watchdog pour plus d'options")
    
    if not os.path.exists(path):
        os.makedirs(path)
        
    last_files = set()
    
    try:
        while True:
            current_files = set()
            for root, dirs, files in os.walk(path):
                for file in files:
                    current_files.add(os.path.join(root, file))
            
            # Nouveaux fichiers
            new_files = current_files - last_files
            for file in new_files:
                print(f"[üìÅ {datetime.now().strftime('%H:%M:%S')}] Nouveau : {os.path.basename(file)}")
            
            # Fichiers supprim√©s
            deleted_files = last_files - current_files
            for file in deleted_files:
                print(f"[üóëÔ∏è {datetime.now().strftime('%H:%M:%S')}] Supprim√© : {os.path.basename(file)}")
            
            last_files = current_files
            time.sleep(5)  # V√©rification toutes les 5 secondes
            
    except KeyboardInterrupt:
        print("\nüì° Observer simple arr√™t√©")